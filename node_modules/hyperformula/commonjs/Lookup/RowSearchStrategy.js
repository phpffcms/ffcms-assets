"use strict";

exports.__esModule = true;
exports.RowSearchStrategy = void 0;

var _ArithmeticHelper = require("../interpreter/ArithmeticHelper");

var _binarySearch = require("../interpreter/binarySearch");

var _InterpreterValue = require("../interpreter/InterpreterValue");

var _AdvancedFind = require("./AdvancedFind");

/**
 * @license
 * Copyright (c) 2022 Handsoncode. All rights reserved.
 */
class RowSearchStrategy extends _AdvancedFind.AdvancedFind {
  constructor(config, dependencyGraph) {
    super(dependencyGraph);
    this.config = config;
    this.dependencyGraph = dependencyGraph;
  }

  find(key, rangeValue, sorted) {
    if (typeof key === 'string') {
      key = (0, _ArithmeticHelper.forceNormalizeString)(key);
    }

    const range = rangeValue.range;

    if (range === undefined) {
      return rangeValue.valuesFromTopLeftCorner().map(_InterpreterValue.getRawValue).indexOf(key);
    } else if (!sorted) {
      return this.dependencyGraph.computeListOfValuesInRange(range).findIndex(arg => {
        arg = (0, _InterpreterValue.getRawValue)(arg);
        arg = typeof arg === 'string' ? (0, _ArithmeticHelper.forceNormalizeString)(arg) : arg;
        return arg === key;
      });
    } else {
      return (0, _binarySearch.rangeLowerBound)(range, key, this.dependencyGraph, 'col');
    }
  }

}

exports.RowSearchStrategy = RowSearchStrategy;